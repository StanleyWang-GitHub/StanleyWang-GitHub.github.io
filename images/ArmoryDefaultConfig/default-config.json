{"apiVersion":"v1","data":{"barometer.yml":"server:\n  port: 9092\n\nspinnaker:\n  redis:\n    host: ${services.redis.host}\n    port: ${services.redis.port}\n","clouddriver-armory.yml":"aws:\n  defaultAssumeRole: role/${SPINNAKER_AWS_DEFAULT_ASSUME_ROLE:SpinnakerManagedProfile}\n  accounts:\n    - name: default-aws-account\n      accountId: ${SPINNAKER_AWS_DEFAULT_ACCOUNT_ID:none}\n\n  client:\n    maxErrorRetry: 20\n\nserviceLimits:\n  cloudProviderOverrides:\n    aws:\n      rateLimit: 15.0\n\n  implementationLimits:\n    AmazonAutoScaling:\n      defaults:\n        rateLimit: 3.0\n    AmazonElasticLoadBalancing:\n      defaults:\n        rateLimit: 5.0\n\nsecurity.basic.enabled: false\nmanagement.security.enabled: false\n","clouddriver-dev.yml":"#\n# Limit cloud provider polling as to not hit rate limits.\n#\n\nserviceLimits:\n  defaults:\n    rateLimit: 2\n","clouddriver.yml":"server:\n  port: ${services.clouddriver.port:7002}\n  address: ${services.clouddriver.host:localhost}\n\nredis:\n  connection: ${services.redis.connection:redis://localhost:6379}\n\nudf:\n  # Controls whether UserDataProviders are used to populate user data of new\n  # server groups. If false, user data is copied over from ancestor server\n  # groups on both CopyLastAsgAtomicOperation and\n  # ModifyAsgLaunchConfigurationOperation (only if no user data is provided\n  # on the given request).\n  enabled: ${services.clouddriver.aws.udf.enabled:true}\n  udfRoot: /opt/spinnaker/config/udf\n  defaultLegacyUdf: false\n\ndefault:\n  account:\n    env: ${providers.aws.primaryCredentials.name}\n\naws:\n  # AWS Credentials are passed either as environment variables or through\n  # a standard AWS file $HOME/.aws/credentials\n  # See providers.aws.primaryCredentials in spinnaker.yml for more\n  # info on setting environment variables.\n  enabled: ${providers.aws.enabled:false}\n  defaults:\n    iamRole: ${providers.aws.defaultIAMRole:BaseIAMRole}\n  defaultRegions:\n    - name: ${providers.aws.defaultRegion:us-east-1}\n  defaultFront50Template: ${services.front50.baseUrl}\n  defaultKeyPairTemplate: ${providers.aws.defaultKeyPairTemplate}\n\nazure:\n  enabled: ${providers.azure.enabled:false}\n\n  accounts:\n    - name: ${providers.azure.primaryCredentials.name}\n      clientId: ${providers.azure.primaryCredentials.clientId}\n      appKey: ${providers.azure.primaryCredentials.appKey}\n      tenantId: ${providers.azure.primaryCredentials.tenantId}\n      subscriptionId: ${providers.azure.primaryCredentials.subscriptionId}\n\ngoogle:\n  enabled: ${providers.google.enabled:false}\n\n  accounts:\n    - name: ${providers.google.primaryCredentials.name}\n      project: ${providers.google.primaryCredentials.project}\n      jsonPath: ${providers.google.primaryCredentials.jsonPath}\n      consul:\n        enabled: ${providers.google.primaryCredentials.consul.enabled:false}\n\ncf:\n  enabled: ${providers.cf.enabled:false}\n\n  accounts:\n    - name: ${providers.cf.primaryCredentials.name}\n      api: ${providers.cf.primaryCredentials.api}\n      console: ${providers.cf.primaryCredentials.console}\n      org: ${providers.cf.defaultOrg}\n      space: ${providers.cf.defaultSpace}\n      username: ${providers.cf.account.name:}\n      password: ${providers.cf.account.password:}\n\nkubernetes:\n  enabled: ${providers.kubernetes.enabled:false}\n  accounts:\n    - name: ${providers.kubernetes.primaryCredentials.name}\n      dockerRegistries:\n        - accountName: ${providers.kubernetes.primaryCredentials.dockerRegistryAccount}\n\nopenstack:\n  enabled: ${providers.openstack.enabled:false}\n  accounts:\n    - name: ${providers.openstack.primaryCredentials.name}\n      authUrl: ${providers.openstack.primaryCredentials.authUrl}\n      username: ${providers.openstack.primaryCredentials.username}\n      password: ${providers.openstack.primaryCredentials.password}\n      projectName: ${providers.openstack.primaryCredentials.projectName}\n      domainName: ${providers.openstack.primaryCredentials.domainName:Default}\n      regions: ${providers.openstack.primaryCredentials.regions}\n      insecure: ${providers.openstack.primaryCredentials.insecure:false}\n      userDataFile: ${providers.openstack.primaryCredentials.userDataFile:}\n\n      # The Openstack API requires that the load balancer be in an ACTIVE\n      # state for it to create associated relationships (i.e. listeners,\n      # pools, monitors). Each modification will cause the load balancer to\n      # go into a PENDING state and back to ACTIVE once the change has been\n      # made. Depending on your implementation, the timeout and polling\n      # intervals would need to be adjusted, especially if testing out\n      # Spinnaker with Devstack or another resource constrained enviroment\n      lbaas:\n        pollTimeout: 60\n        pollInterval: 5\n\ndockerRegistry:\n  enabled: ${providers.dockerRegistry.enabled:false}\n  accounts:\n    - name: ${providers.dockerRegistry.primaryCredentials.name}\n      address: ${providers.dockerRegistry.primaryCredentials.address}\n      username: ${providers.dockerRegistry.primaryCredentials.username:}\n      passwordFile: ${providers.dockerRegistry.primaryCredentials.passwordFile}\n\ncredentials:\n  primaryAccountTypes: ${providers.aws.primaryCredentials.name}, ${providers.google.primaryCredentials.name}, ${providers.cf.primaryCredentials.name}, ${providers.azure.primaryCredentials.name}\n  challengeDestructiveActionsEnvironments: ${providers.aws.primaryCredentials.name}, ${providers.google.primaryCredentials.name}, ${providers.cf.primaryCredentials.name}, ${providers.azure.primaryCredentials.name}\n\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: ${services.spectator.webEndpoint.enabled:false}\n    prototypeFilter:\n      path: ${services.spectator.webEndpoint.prototypeFilter.path:}\n\n  stackdriver:\n    enabled: ${services.stackdriver.enabled}\n    projectName: ${services.stackdriver.projectName}\n    credentialsPath: ${services.stackdriver.credentialsPath}\n\nstackdriver:\n  hints:\n    - name: controller.invocations\n      labels:\n      - account\n      - region\n","dinghy.yml":"","echo-armory.yml":"diagnostics:\n  enabled: true\n  id: ${ARMORY_ID:unknown}\n\narmorywebhooks:\n  enabled: false\n  forwarding:\n    baseUrl: http://armory-dinghy:8081\n    endpoint: v1/webhooks\n","echo-noncron.yml":"scheduler:\n  enabled: false\n","echo.yml":"server:\n  port: ${services.echo.port:8089}\n  address: ${services.echo.host:localhost}\n\ncassandra:\n  enabled: ${services.echo.cassandra.enabled:false}\n  embedded: ${services.cassandra.embedded:false}\n  host: ${services.cassandra.host:localhost}\n\nspinnaker:\n  baseUrl: ${services.deck.baseUrl}\n  cassandra:\n     enabled: ${services.echo.cassandra.enabled:false}\n  inMemory:\n     enabled: ${services.echo.inMemory.enabled:true}\n\nfront50:\n  baseUrl: ${services.front50.baseUrl:http://localhost:8080}\n\norca:\n  baseUrl: ${services.orca.baseUrl:http://localhost:8083}\n\nendpoints.health.sensitive: false\n\nslack:\n  enabled: ${services.echo.notifications.slack.enabled:false}\n  token: ${services.echo.notifications.slack.token}\n\nspring:\n  mail:\n    host: ${mail.host}\n\nmail:\n  enabled: ${services.echo.notifications.mail.enabled:false}\n  host: ${services.echo.notifications.mail.host}\n  from: ${services.echo.notifications.mail.fromAddress}\n\nhipchat:\n  enabled: ${services.echo.notifications.hipchat.enabled:false}\n  baseUrl: ${services.echo.notifications.hipchat.url}\n  token: ${services.echo.notifications.hipchat.token}\n\ntwilio:\n  enabled: ${services.echo.notifications.sms.enabled:false}\n  baseUrl: ${services.echo.notifications.sms.url:https://api.twilio.com/}\n  account: ${services.echo.notifications.sms.account}\n  token: ${services.echo.notifications.sms.token}\n  from: ${services.echo.notifications.sms.from}\n\nscheduler:\n  enabled: ${services.echo.cron.enabled:true}\n  threadPoolSize: 20\n  triggeringEnabled: true\n  pipelineConfigsPoller:\n    enabled: true\n    pollingIntervalMs: 30000\n  cron:\n    timezone: ${services.echo.cron.timezone}\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: ${services.spectator.webEndpoint.enabled:false}\n    prototypeFilter:\n      path: ${services.spectator.webEndpoint.prototypeFilter.path:}\n\n  stackdriver:\n    enabled: ${services.stackdriver.enabled}\n    projectName: ${services.stackdriver.projectName}\n    credentialsPath: ${services.stackdriver.credentialsPath}\n\nwebhooks:\n  artifacts:\n    enabled: true\n","fetch.sh":"#!/bin/bash -xe\n\nCONFIG_LOCATION=${SPINNAKER_HOME:-\"/opt/spinnaker\"}/config\nCONTAINER=$1\n\nrm -f /opt/spinnaker/config/*.yml\n\nmkdir -p ${CONFIG_LOCATION}\n\n# Setup the default configuration that comes with a distribution\nfor filename in /opt/spinnaker/config/default/*.yml; do\n    cp $filename ${CONFIG_LOCATION}\ndone\n\n# User specific config\nif [ -d /opt/spinnaker/config/custom ]; then\n    for filename in /opt/spinnaker/config/custom/*; do\n        cp $filename ${CONFIG_LOCATION}\n    done\nfi\n\nadd_ca_certs() {\n  # if CA exists, mount it into the default JKS store\n  ca_cert_path=\"$1\"\n  jks_path=\"$2\"\n  alias=\"$3\"\n\n  if [[ \"$(whoami)\" != \"root\" ]]; then\n    echo \"INFO: I do not have proper permisions to add CA roots\"\n    return\n  fi\n\n  if [[ ! -f ${ca_cert_path} ]]; then\n    echo \"INFO: No CA cert found at ${ca_cert_path}\"\n    return\n  fi\n  keytool -importcert \\\n      -file ${ca_cert_path} \\\n      -keystore ${jks_path} \\\n      -alias ${alias} \\\n      -storepass changeit \\\n      -noprompt\n}\n\nif [ `which keytool` ]; then\n  echo \"INFO: Keytool found adding certs where appropriate\"\n  add_ca_certs \"${CONFIG_LOCATION}/ca.crt\" \"/etc/ssl/certs/java/cacerts\" \"custom-ca\"\n  #we'll want to add saml, oauth, authn/authz stuff here too\nelse\n  echo \"INFO: Keytool not found, not adding any certs/private keys\"\nfi\n\nsaml_pem_path=\"/opt/spinnaker/config/custom/saml.pem\"\nsaml_pkcs12_path=\"/tmp/saml.pkcs12\"\nsaml_jks_path=\"${CONFIG_LOCATION}/saml.jks\"\n\n# for x509\nx509_ca_cert_path=\"/opt/spinnaker/config/custom/x509ca.crt\"\nx509_client_cert_path=\"/opt/spinnaker/config/custom/x509client.crt\"\nx509_jks_path=\"${CONFIG_LOCATION}/x509.jks\"\nx509_nginx_cert_path=\"/opt/nginx/certs/ssl.crt\"\n\nif [ \"${CONTAINER}\" == \"gate\" ]; then\n    if [ -f ${saml_pem_path} ]; then\n        echo \"Loading ${saml_pem_path} into ${saml_jks_path}\"\n        # Convert PEM to PKCS12 with a password.\n        openssl pkcs12 -export -out ${saml_pkcs12_path} -in ${saml_pem_path} -password pass:changeit -name saml\n        keytool -genkey -v -keystore ${saml_jks_path} -alias saml \\\n                -keyalg RSA -keysize 2048 -validity 10000 \\\n                -storepass changeit -keypass changeit -dname \"CN=armory\"\n        keytool -importkeystore \\\n                -srckeystore ${saml_pkcs12_path} \\\n                -srcstoretype PKCS12 \\\n                -srcstorepass changeit \\\n                -destkeystore ${saml_jks_path} \\\n                -deststoretype JKS \\\n                -storepass changeit \\\n                -alias saml \\\n                -destalias saml \\\n                -noprompt\n    else\n        echo \"No SAML IDP pemfile found at ${saml_pem_path}\"\n    fi\n    if [ -f ${x509_ca_cert_path} ]; then\n        echo \"Loading ${x509_ca_cert_path} into ${x509_jks_path}\"\n        add_ca_certs ${x509_ca_cert_path} ${x509_jks_path} \"ca\"\n    else\n        echo \"No x509 CA cert found at ${x509_ca_cert_path}\"\n    fi\n    if [ -f ${x509_client_cert_path} ]; then\n        echo \"Loading ${x509_client_cert_path} into ${x509_jks_path}\"\n        add_ca_certs ${x509_client_cert_path} ${x509_jks_path} \"client\"\n    else\n        echo \"No x509 Client cert found at ${x509_client_cert_path}\"\n    fi\n\n\n    if [ -f ${x509_nginx_cert_path} ]; then\n        echo \"Creating a self-signed CA (EXPIRES IN 360 DAYS) with java keystore: ${x509_jks_path}\"\n        echo -e \"\\n\\n\\n\\n\\n\\ny\\n\" | keytool -genkey -keyalg RSA -alias server -keystore keystore.jks -storepass changeit -validity 360 -keysize 2048\n        keytool -importkeystore \\\n                -srckeystore keystore.jks \\\n                -srcstorepass changeit \\\n                -destkeystore \"${x509_jks_path}\" \\\n                -storepass changeit \\\n                -srcalias server \\\n                -destalias server \\\n                -noprompt\n    else\n        echo \"No x509 nginx cert found at ${x509_nginx_cert_path}\"\n    fi\nfi\n\nif [ \"${CONTAINER}\" == \"nginx\" ]; then\n    nginx_conf_path=\"/opt/spinnaker/config/default/nginx.conf\"\n    if [ -f ${nginx_conf_path} ]; then\n        cp ${nginx_conf_path} /etc/nginx/nginx.conf\n    fi\nfi\n\n\n\n","fiat.yml":"server:\n  port: ${services.fiat.port:7003}\n  address: ${services.fiat.host:localhost}\n\nredis:\n  connection: ${services.redis.connection:redis://localhost:6379}\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: ${services.spectator.webEndpoint.enabled:false}\n    prototypeFilter:\n      path: ${services.spectator.webEndpoint.prototypeFilter.path:}\n\n  stackdriver:\n    enabled: ${services.stackdriver.enabled}\n    projectName: ${services.stackdriver.projectName}\n    credentialsPath: ${services.stackdriver.credentialsPath}\n\nhystrix:\n command:\n   default.execution.isolation.thread.timeoutInMilliseconds: 20000\n\nlogging:\n  level:\n    com.netflix.spinnaker.fiat: DEBUG","front50-armory.yml":"spinnaker:\n  redis:\n    enabled: true\n    host: ${REDIS_HOST}\n","front50.yml":"server:\n  port: ${services.front50.port:8080}\n  address: ${services.front50.host:localhost}\n\nhystrix:\n  command:\n    default.execution.isolation.thread.timeoutInMilliseconds: 15000\n\ncassandra:\n  enabled: ${services.front50.cassandra.enabled:false}\n  embedded: ${services.cassandra.embedded:false}\n  host: ${services.cassandra.host:localhost}\n\naws:\n  simpleDBEnabled: ${providers.aws.simpleDBEnabled:false}\n  defaultSimpleDBDomain: ${providers.aws.defaultSimpleDBDomain}\n\nspinnaker:\n  cassandra:\n    enabled: ${services.front50.cassandra.enabled:false}\n    host: ${services.cassandra.host:localhost}\n    port: ${services.cassandra.port:9042}\n    cluster: ${services.cassandra.cluster:CASS_SPINNAKER}\n    keyspace: front50\n    name: global\n\n  redis:\n    enabled: ${services.front50.redis.enabled:false}\n\n  gcs:\n    enabled: ${services.front50.gcs.enabled:false}\n    bucket: ${services.front50.storage_bucket:}\n    # See https://cloud.google.com/storage/docs/managing-buckets#manage-class-location\n    bucketLocation: ${services.front50.bucket_location:}\n    rootFolder: ${services.front50.rootFolder:front50}\n    project: ${providers.google.primaryCredentials.project}\n    jsonPath: ${providers.google.primaryCredentials.jsonPath}\n\n  s3:\n    enabled: ${services.front50.s3.enabled:false}\n    bucket: ${services.front50.storage_bucket:}\n    rootFolder: ${services.front50.rootFolder:front50}\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: ${services.spectator.webEndpoint.enabled:false}\n    prototypeFilter:\n      path: ${services.spectator.webEndpoint.prototypeFilter.path:}\n\n  stackdriver:\n    enabled: ${services.stackdriver.enabled}\n    projectName: ${services.stackdriver.projectName}\n    credentialsPath: ${services.stackdriver.credentialsPath}\n\nstackdriver:\n  hints:\n    - name: controller.invocations\n      labels:\n      - application\n      - cause\n    - name: aws.request.httpRequestTime\n      labels:\n      - status\n      - exception\n      - AWSErrorCode\n    - name: aws.request.requestSigningTime\n      labels:\n      - exception\n","gate-armory.yml":"lighthouse:\n    baseUrl: http://${DEFAULT_DNS_NAME:lighthouse}:5000\n\n","gate.yml":"server:\n  port: ${services.gate.port:8084}\n  address: ${services.gate.host:localhost}\n\n# Circular references since we're already using 'services'\n# services:\n#   clouddriver:\n#     baseUrl: ${services.clouddriver.baseUrl:localhost:7002}\n#   orca:\n#     baseUrl: ${services.orca.baseUrl:localhost:8083}\n#   front50:\n#     baseUrl: ${services.front50.baseUrl:localhost:8080}\n# #optional services:\n#   echo:\n#     enabled: ${services.echo.enabled:true}\n#     baseUrl: ${services.echo.baseUrl:8089}\n#   flapjack:\n#     enabled: ${services.flapjack.enabled:false}\n#   igor:\n#     enabled: ${services.igor.enabled:false}\n#     baseUrl: ${services.igor.baseUrl:8088}\n\nredis:\n  connection: ${services.redis.connection}\n  configuration:\n    secure: true\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: ${services.spectator.webEndpoint.enabled:false}\n    prototypeFilter:\n      path: ${services.spectator.webEndpoint.prototypeFilter.path:}\n\n  stackdriver:\n    enabled: ${services.stackdriver.enabled}\n    projectName: ${services.stackdriver.projectName}\n    credentialsPath: ${services.stackdriver.credentialsPath}\n\nstackdriver:\n  hints:\n    - name: EurekaOkClient_Request\n      labels:\n      - cause\n      - reason\n      - status\n","igor-nonpolling.yml":"jenkins:\n  polling:\n    enabled: false\n","igor.yml":"server:\n  port: ${services.igor.port:8088}\n  address: ${services.igor.host:localhost}\n\njenkins:\n  enabled: ${services.jenkins.enabled:false}\n  masters:\n    - name: ${services.jenkins.defaultMaster.name}\n      address: ${services.jenkins.defaultMaster.baseUrl}\n      username: ${services.jenkins.defaultMaster.username}\n      password: ${services.jenkins.defaultMaster.password}\n      csrf: ${services.jenkins.defaultMaster.csrf:false}\n\ntravis:\n  enabled: ${services.travis.enabled:false}\n  masters:\n    - name: ${services.travis.defaultMaster.name}\n      baseUrl: ${services.travis.defaultMaster.baseUrl}\n      address: ${services.travis.defaultMaster.address}\n      githubToken: ${services.travis.defaultMaster.githubToken}\n\ndockerRegistry:\n  enabled: ${providers.dockerRegistry.enabled:false}\n\nredis:\n  connection: ${services.redis.connection:redis://localhost:6379}\n\n# Igor depends on Clouddriver and Echo. These are normally configured\n# in spinnaker[-local].yml (if present), otherwise, uncomment this.\n# services:\n#   clouddriver:\n#     baseUrl: ${services.clouddriver.baseUrl}\n#   echo:\n#     baseUrl: ${services.echo.baseUrl}\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: ${services.spectator.webEndpoint.enabled:false}\n    prototypeFilter:\n      path: ${services.spectator.webEndpoint.prototypeFilter.path:}\n\n  stackdriver:\n    enabled: ${services.stackdriver.enabled}\n    projectName: ${services.stackdriver.projectName}\n    credentialsPath: ${services.stackdriver.credentialsPath}\n\nstackdriver:\n  hints:\n    - name: controller.invocations\n      labels:\n      - master\n","kayenta-armory.yml":"kayenta:\n  aws:\n    enabled: ${ARMORYSPINNAKER_S3_ENABLED:false}\n    accounts:\n      - name: aws-s3-storage\n        bucket: ${ARMORYSPINNAKER_CONF_STORE_BUCKET}\n        rootFolder: kayenta\n        supportedTypes:\n          - OBJECT_STORE\n          - CONFIGURATION_STORE\n\n  s3:\n    enabled: ${ARMORYSPINNAKER_S3_ENABLED:false}\n\n  google:\n    enabled: ${ARMORYSPINNAKER_GCS_ENABLED:false}\n    accounts:\n      - name: cloud-armory\n        # project: myproject\n        # jsonPath: /opt/spinnaker/credentials/gcp.json\n        bucket: ${ARMORYSPINNAKER_CONF_STORE_BUCKET}\n        rootFolder: kayenta-prod\n        supportedTypes:\n          - METRICS_STORE\n          - OBJECT_STORE\n          - CONFIGURATION_STORE\n\n  gcs:\n    enabled: ${ARMORYSPINNAKER_GCS_ENABLED:false}\n","kayenta.yml":"\nserver:\n  port: 8090\n\nkayenta:\n  atlas:\n    enabled: false\n#    stageTimeoutMinutes: 3\n#    maxBackoffPeriodSeconds: 30\n#    accounts:\n#      - name:\n#        endpoint:\n#          baseUrl: http://localhost:7101\n#        namespace:\n#        supportedTypes:\n#          - METRICS_STORE\n\n  google:\n    enabled: false\n#    accounts:\n#      - name:\n#        project:\n#        jsonPath:\n#        bucket:\n#        rootFolder: kayenta\n#        supportedTypes:\n#          - METRICS_STORE\n#          - OBJECT_STORE\n#          - CONFIGURATION_STORE\n\n  aws:\n    enabled: false\n#    accounts:\n#      - name:\n#        bucket:\n#        rootFolder: kayenta\n#        supportedTypes:\n#          - OBJECT_STORE\n#          - CONFIGURATION_STORE\n\n  datadog:\n    enabled: false\n#    accounts:\n#      - name: my-datadog-account\n#        apiKey: xxxx\n#        applicationKey: xxxx\n#        supportedTypes:\n#          - METRICS_STORE\n#        endpoint.baseUrl: https://app.datadoghq.com\n\n  prometheus:\n    enabled: false\n#    accounts:\n#      - name: my-prometheus-account\n#        endpoint:\n#          baseUrl: http://localhost:9090\n#        supportedTypes:\n#          - METRICS_STORE\n\n  gcs:\n    enabled: false\n\n  s3:\n    enabled: false\n\n  stackdriver:\n    enabled: false\n\n  memory:\n    enabled: false\n\n  configbin:\n    enabled: false\n\nkeiko:\n  queue:\n    redis:\n      queueName: kayenta.keiko.queue\n      deadLetterQueueName: kayenta.keiko.queue.deadLetters\n\nredis:\n  connection: ${services.redis.connection}\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: true\n\nswagger:\n  enabled: true\n  title: Kayenta API\n  description:\n  contact:\n  patterns:\n    - /admin.*\n    - /canary.*\n    - /canaryConfig.*\n    - /canaryJudgeResult.*\n    - /credentials.*\n    - /fetch.*\n    - /health\n    - /judges.*\n    - /metadata.*\n    - /metricSetList.*\n    - /metricSetPairList.*\n    - /pipeline.*\n\nsecurity.basic.enabled: false\nmanagement.security.enabled: false\n","nginx.conf":"user  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n\nstream {\n    upstream gate_api {\n        server armory-gate:8085;\n    }\n\n    server {\n        listen 8085;\n        proxy_pass gate_api;\n    }\n}\n","nginx.http.conf":"gzip on;\ngzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;\n\nserver {\n       listen 80;\n       listen [::]:80;\n\n       location / {\n            proxy_pass http://armory-deck/;\n       }\n\n       location /api/ {\n            proxy_pass http://armory-gate:8084/;\n       }\n\n       location /slack/ {\n           proxy_pass http://armory-platform:10000/;\n       }\n\n       rewrite ^/login(.*)$ /api/login$1 last;\n       rewrite ^/auth(.*)$ /api/auth$1 last;\n}\n","nginx.https.conf":"gzip on;\ngzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;\n\nserver {\n    listen 80;\n    listen [::]:80;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n\n    ssl on;\n\n    ssl_certificate /opt/nginx/certs/ssl.crt;\n    ssl_certificate_key /opt/nginx/certs/ssl.key;\n\n    location / {\n        proxy_pass http://armory-deck/;\n    }\n\n    location /api/ {\n        proxy_pass http://armory-gate:8084/;\n        proxy_set_header Host            $host;\n        proxy_set_header X-Real-IP       $proxy_protocol_addr;\n        proxy_set_header X-Forwarded-For $proxy_protocol_addr;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /slack/ {\n        proxy_pass http://armory-platform:10000/;\n    }\n\n    rewrite ^/login(.*)$ /api/login$1 last;\n    rewrite ^/auth(.*)$ /api/auth$1 last;\n}\n","orca-armory.yml":"mine:\n  baseUrl: http://${services.barometer.host}:${services.barometer.port}\n\npipelineTemplate:\n  enabled: ${features.pipelineTemplates.enabled:false}\n  jinja:\n    enabled: true\n\nkayenta:\n  enabled: ${services.kayenta.enabled:false}\n  baseUrl: ${services.kayenta.baseUrl}\n\njira:\n  enabled: ${features.jira.enabled:false}\n  # Fill in your basic auth:  Base64(\"user:pass\")\n  basicAuth:  \"Basic ${features.jira.basicAuthToken}\"\n  # ex. https://myjira.atlassian.net/rest/api/2/issue/\n  url: ${features.jira.createIssueUrl}\n\nwebhook:\n  preconfigured:\n    - label: Enforce Pipeline Policy\n      description: Checks pipeline configuration against policy requirements\n      type: enforcePipelinePolicy\n      enabled: ${features.certifiedPipelines.enabled:false}\n      url: \"http://lighthouse:5000/v1/pipelines/${execution.application}/${execution.pipelineConfigId}?check_policy=yes\"\n      headers:\n        Accept:\n          - application/json\n      method: GET\n      waitForCompletion: true\n      statusUrlResolution: getMethod\n      statusJsonPath: $.status\n      successStatuses: pass\n      canceledStatuses:\n      terminalStatuses: TERMINAL\n\n    - label: \"Jira: Create Issue\"\n      description:  Enter a Jira ticket when this pipeline runs\n      type: createJiraIssue\n      enabled: ${jira.enabled}\n      url:  ${jira.url}\n      customHeaders:\n        \"Content-Type\": application/json\n        Authorization: ${jira.basicAuth}\n      method: POST\n      parameters:\n        - name: summary\n          label: Issue Summary\n          description: A short summary of your issue.\n        - name: description\n          label: Issue Description\n          description: A longer description of your issue.\n        - name: projectKey\n          label: Project key\n          description: The key of your JIRA project.\n        - name: type\n          label: Issue Type\n          description: The type of your issue, e.g. \\\"Task\\\", \\\"Story\\\", etc.\n      payload: |\n        {\n          \"fields\" : {\n            \"description\": \"${parameterValues['description']}\",\n            \"issuetype\": {\n               \"name\": \"${parameterValues['type']}\"\n            },\n            \"project\": {\n               \"key\": \"${parameterValues['projectKey']}\"\n            },\n            \"summary\":  \"${parameterValues['summary']}\"\n          }\n        }\n      waitForCompletion: false\n\n    - label: \"Jira: Update Issue\"\n      description:  Update a previously created Jira Issue\n      type: updateJiraIssue\n      enabled: ${jira.enabled}\n      url: \"${execution.stages.?[type == 'createJiraIssue'][0]['context']['buildInfo']['self']}\"\n      customHeaders:\n        \"Content-Type\": application/json\n        Authorization: ${jira.basicAuth}\n      method: PUT\n      parameters:\n        - name: summary\n          label: Issue Summary\n          description: A short summary of your issue.\n        - name: description\n          label: Issue Description\n          description: A longer description of your issue.\n      payload: |\n        {\n          \"fields\" : {\n            \"description\": \"${parameterValues['description']}\",\n            \"summary\": \"${parameterValues['summary']}\"\n          }\n        }\n      waitForCompletion: false\n\n    - label: \"Jira: Transition Issue\"\n      description:  Change state of existing Jira Issue\n      type: transitionJiraIssue\n      enabled: ${jira.enabled}\n      url: \"${execution.stages.?[type == 'createJiraIssue'][0]['context']['buildInfo']['self']}/transitions\"\n      customHeaders:\n        \"Content-Type\": application/json\n        Authorization: ${jira.basicAuth}\n      method: POST\n      parameters:\n        - name: newStateID\n          label: New State ID\n          description: The ID of the state you want to transition the issue to.\n      payload: |\n        {\n          \"transition\" : {\n            \"id\" : \"${parameterValues['newStateID']}\"\n          }\n        }\n      waitForCompletion: false\n\n    - label: \"Jira: Add Comment\"\n      description:  Add a comment to an existing Jira Issue\n      type: commentJiraIssue\n      enabled: ${jira.enabled}\n      url: \"${execution.stages.?[type == 'createJiraIssue'][0]['context']['buildInfo']['self']}/comment\"\n      customHeaders:\n        \"Content-Type\": application/json\n        Authorization: ${jira.basicAuth}\n      method: POST\n      parameters:\n        - name: body\n          label: Comment body\n          description: The text body of the component.\n      payload: |\n        {\n          \"body\" : \"${parameterValues['body']}\"\n        }\n      waitForCompletion: false\n\n","orca.yml":"server:\n    port: ${services.orca.port:8083}\n    address: ${services.orca.host:localhost}\n\noort:\n    baseUrl: ${services.oort.baseUrl:localhost:7002}\nfront50:\n    baseUrl: ${services.front50.baseUrl:localhost:8080}\nmort:\n    baseUrl: ${services.mort.baseUrl:localhost:7002}\nkato:\n    baseUrl: ${services.kato.baseUrl:localhost:7002}\nbakery:\n    baseUrl: ${services.bakery.baseUrl:localhost:8087}\n    extractBuildDetails: ${services.bakery.extractBuildDetails:true}\n    allowMissingPackageInstallation: ${services.bakery.allowMissingPackageInstallation:true}\necho:\n    enabled: ${services.echo.enabled:false}\n    baseUrl: ${services.echo.baseUrl:8089}\n\nigor:\n    baseUrl: ${services.igor.baseUrl:8088}\n\nflex:\n  baseUrl: http://not-a-host\n\ndefault:\n  bake:\n    account: ${providers.aws.primaryCredentials.name}\n  securityGroups:\n  vpc:\n    securityGroups:\n\nredis:\n  connection: ${services.redis.connection}\n\ntasks:\n  executionWindow:\n    timezone: ${services.orca.timezone}\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: ${services.spectator.webEndpoint.enabled:false}\n    prototypeFilter:\n      path: ${services.spectator.webEndpoint.prototypeFilter.path:}\n\n  stackdriver:\n    enabled: ${services.stackdriver.enabled}\n    projectName: ${services.stackdriver.projectName}\n    credentialsPath: ${services.stackdriver.credentialsPath}\n\nstackdriver:\n  hints:\n    - name: controller.invocations\n      labels:\n      - application\n","rosco-armory.yml":"redis:\n  timeout: 50000\n\nrosco:\n  jobs:\n    local:\n      timeoutMinutes: 60\n","rosco.yml":"server:\n  port: ${services.rosco.port:8087}\n  address: ${services.rosco.host:localhost}\n\nredis:\n  connection: ${services.redis.connection:redis://localhost:6379}\n\naws:\n  enabled: ${providers.aws.enabled:false}\n\ndocker:\n  enabled: ${services.docker.enabled:false}\n  bakeryDefaults:\n    targetRepository: ${services.docker.targetRepository}\n\ngoogle:\n  enabled: ${providers.google.enabled:false}\n  accounts:\n    - name: ${providers.google.primaryCredentials.name}\n      project: ${providers.google.primaryCredentials.project}\n      jsonPath: ${providers.google.primaryCredentials.jsonPath}\n  gce:\n    bakeryDefaults:\n      zone: ${providers.google.defaultZone}\n\nrosco:\n  configDir: ${services.rosco.configDir}\n  jobs:\n    local:\n      timeoutMinutes: 30\n\nspectator:\n  applicationName: ${spring.application.name}\n  webEndpoint:\n    enabled: ${services.spectator.webEndpoint.enabled:false}\n    prototypeFilter:\n      path: ${services.spectator.webEndpoint.prototypeFilter.path:}\n\n  stackdriver:\n    enabled: ${services.stackdriver.enabled}\n    projectName: ${services.stackdriver.projectName}\n    credentialsPath: ${services.stackdriver.credentialsPath}\n\nstackdriver:\n  hints:\n    - name: bakes\n      labels:\n      - success\n","spinnaker-armory.yml":"armory:\n  architecture: 'k8s'\n\nfeatures:\n  artifacts:\n    enabled: true\n  # features are should be turned on in {ENV}.env. ex: prod.env\n  pipelineTemplates:\n    enabled: ${PIPELINE_TEMPLATES_ENABLED:false}\n  infrastructureStages:\n    enabled: ${INFRA_ENABLED:false}\n  certifiedPipelines:\n    enabled: ${CERTIFIED_PIPELINES_ENABLED:false}\n  configuratorEnabled:\n    enabled: true\n  configuratorWizard:\n    enabled: true\n  configuratorCerts:\n    enabled: true\n  loadtestStage:\n    enabled: ${LOADTEST_ENABLED:false}\n  jira:\n    # These settings are for the Jira Stages (webhook-based):\n    enabled: ${JIRA_ENABLED:false}\n    # Should be the basic Authorization header value token, the Base64\n    # encoded version of \"username:password\".\n    basicAuthToken: ${JIRA_BASIC_AUTH}\n    # Should be the \"create issue\" endpoint, for example:\n    #    https://armory.atlassian.net/rest/api/2/issue/\n    url: ${JIRA_URL}\n\n    # These setings are for Echo's Jira integration\n    login: ${JIRA_LOGIN}\n    password: ${JIRA_PASSWORD}\n\n  slaEnabled:\n    enabled: ${SLA_ENABLED:false}\n  chaosMonkey:\n    enabled: ${CHAOS_ENABLED:false}\n\n  armoryPlatform:\n    enabled: ${PLATFORM_ENABLED:false}\n    uiEnabled: ${PLATFORM_UI_ENABLED:false}\n\n\nservices:\n  default:\n    host: ${DEFAULT_DNS_NAME:localhost}\n\n  clouddriver:\n    host: ${DEFAULT_DNS_NAME:armory-clouddriver}\n    entityTags:\n      enabled: false\n\n  configurator:\n    baseUrl: http://${CONFIGURATOR_HOST:armory-configurator}:8069\n\n  echo:\n    host: ${DEFAULT_DNS_NAME:armory-echo}\n\n  deck:\n    gateUrl: ${API_HOST:service.default.host}\n    baseUrl: ${DECK_HOST:armory-deck}\n\n  dinghy:\n    enabled: ${DINGHY_ENABLED:false}\n    host: ${DEFAULT_DNS_NAME:armory-dinghy}\n    baseUrl: ${services.default.protocol}://${services.dinghy.host}:${services.dinghy.port}\n    port: 8081\n\n  front50:\n    host: ${DEFAULT_DNS_NAME:armory-front50}\n    cassandra:\n      enabled: false\n    redis:\n      enabled: true\n    gcs:\n      enabled: ${ARMORYSPINNAKER_GCS_ENABLED:false}\n    s3:\n      enabled: ${ARMORYSPINNAKER_S3_ENABLED:false}\n    storage_bucket: ${ARMORYSPINNAKER_CONF_STORE_BUCKET}\n    rootFolder: ${ARMORYSPINNAKER_CONF_STORE_PREFIX:front50}\n\n  gate:\n    host: ${DEFAULT_DNS_NAME:armory-gate}\n\n  igor:\n    host: ${DEFAULT_DNS_NAME:armory-igor}\n\n  kayenta:\n    enabled: true\n    host: ${DEFAULT_DNS_NAME:armory-kayenta}\n    canaryConfigStore: true\n    port: 8090\n    baseUrl: ${services.default.protocol}://${services.kayenta.host}:${services.kayenta.port}\n    metricsStore: ${METRICS_STORE:stackdriver}\n    metricsAccountName: ${METRICS_ACCOUNT_NAME}\n    storageAccountName: ${STORAGE_ACCOUNT_NAME}\n    atlasWebComponentsUrl: ${ATLAS_COMPONENTS_URL:}\n\n  lighthouse:\n    host: ${DEFAULT_DNS_NAME:armory-lighthouse}\n    port: 5000\n    baseUrl: ${services.default.protocol}://${services.lighthouse.host}:${services.lighthouse.port}\n\n  orca:\n    host: ${DEFAULT_DNS_NAME:armory-orca}\n\n  platform:\n    enabled: ${PLATFORM_ENABLED:false}\n    host: ${DEFAULT_DNS_NAME:armory-platform}\n    baseUrl: ${services.default.protocol}://${services.platform.host}:${services.platform.port}\n    port: 5001\n\n  rosco:\n    host: ${DEFAULT_DNS_NAME:armory-rosco}\n    enabled: true\n    configDir: /opt/spinnaker/config/packer\n\n  bakery:\n    allowMissingPackageInstallation: true\n\n  barometer:\n    enabled: ${BAROMETER_ENABLED:false}\n    host: ${DEFAULT_DNS_NAME:armory-barometer}\n    baseUrl: ${services.default.protocol}://${services.barometer.host}:${services.barometer.port}\n    port: 9092\n    newRelicEnabled: ${NEW_RELIC_ENABLED:false}\n\n  redis:\n    # If you are using a remote redis server, you can set the host here.\n    # If the remote server is on a different port or url, you can add\n    # a \"port\" or \"baseUrl\" field here instead.\n    host: ${REDIS_HOST:armory-redis}\n    port: 6379\n    connection: redis://${services.redis.host}:${services.redis.port}\n\n  fiat:\n    enabled: ${FIAT_ENABLED:false}\n    host: ${DEFAULT_DNS_NAME:armory-fiat}\n    port: 7003\n    baseUrl: ${services.default.protocol}://${services.fiat.host}:${services.fiat.port}\n\nproviders:\n  aws:\n    enabled: ${SPINNAKER_AWS_ENABLED:true}\n    defaultRegion: ${SPINNAKER_AWS_DEFAULT_REGION:us-west-2}\n    defaultIAMRole: ${SPINNAKER_AWS_DEFAULT_IAM_ROLE:SpinnakerInstanceProfile}\n    defaultAssumeRole: ${SPINNAKER_AWS_DEFAULT_ASSUME_ROLE:SpinnakerManagedProfile}\n    primaryCredentials:\n      name: ${SPINNAKER_AWS_DEFAULT_ACCOUNT:default-aws-account}\n      # The actual credentials are set using a standard AWS client library mechanism\n      # http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html\n      # Typically this is a $HOME/.aws/credentials file (remember, a standard\n      # spinnaker installation runs as user \"spinnaker\" whose $HOME is\n      # /home/spinnaker). The primaryCredentials.name will identify which profile\n      # to use (for .aws/credentials).\n\n  kubernetes:\n    proxy: localhost:8001\n    apiPrefix: api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard/#\n","spinnaker.yml":"\n# This file is intended to serve as a master configuration for a Spinnaker\n# deployment. Customizations to the deployment should be made in another file\n# named \"spinnaker-local.yml\". The distribution has a prototype called\n# \"default-spinnaker-local.yml\" which calls out the subset of attributes of\n# general interest. It can be copied into a \"spinnaker-local.yml\" to start\n# with. The prototype does not change any of the default values here, it just\n# surfaces the more critical attributes.\n\nglobal:\n  spinnaker:\n    timezone: 'America/Los_Angeles'\n    architecture: ${PLATFORM_ARCHITECTURE}\n\nservices:\n  default:\n    # These defaults can be modified to change all the spinnaker subsystems\n    # (clouddriver, gate, etc) at once, but not external systems (jenkins, etc).\n    # Individual systems can still be overridden using their own section entry\n    # directly under 'services'.\n    host: localhost\n    protocol: http\n\n  clouddriver:\n    host: ${services.default.host}\n    port: 7002\n    baseUrl: ${services.default.protocol}://${services.clouddriver.host}:${services.clouddriver.port}\n    aws:\n      udf:\n        # Controls whether UserDataProviders are used to populate user data of\n        # new server groups. If false, user data is copied over from ancestor\n        # server groups on both CopyLastAsgAtomicOperation and\n        # ModifyAsgLaunchConfigurationOperation (only if no user data is\n        # provided on the given request).\n        enabled: true\n\n  echo:\n    enabled: true\n    host: ${services.default.host}\n    port: 8089\n    baseUrl: ${services.default.protocol}://${services.echo.host}:${services.echo.port}\n\n    # Persistence mechanism to use\n    cassandra:\n      enabled: false\n    inMemory:\n      enabled: true\n\n    cron:\n      # Allow pipeline triggers to run periodically via cron expressions.\n      enabled: true\n      timezone: ${global.spinnaker.timezone}\n\n    notifications:\n      # The following blocks can enable Spinnaker to send notifications\n      # using the corresponding mechanism.\n      # See http://www.spinnaker.io/docs/notifications-and-events-guide\n      # for more information.\n      mail:\n        enabled: false\n        host: # the smtp host\n        fromAddress: # the address for which emails are sent from\n      hipchat:\n        enabled: false\n        url: # the hipchat server to connect to\n        token: # the hipchat auth token\n        botName: # the username of the bot\n      sms:\n        enabled: false\n        account: # twilio account id\n        token: # twilio auth token\n        from: # phone number by which sms messages are sent\n      slack:\n        # See https://api.slack.com/bot-users for details about using bots\n        # and how to create your own bot user.\n        enabled: false\n        token: # the API token for the bot\n        botName: # the username of the bot\n\n  deck:\n    # Frontend configuration.\n    # If you are proxying Spinnaker behind a single host, you may want to\n    # override these values. Remember to run `reconfigure_spinnaker.sh` after.\n    host: ${services.default.host}\n    port: 9000\n    baseUrl: ${services.default.protocol}://${services.deck.host}:${services.deck.port}\n    gateUrl: ${API_HOST:services.gate.baseUrl}\n    bakeryUrl: ${services.bakery.baseUrl}\n    timezone: ${global.spinnaker.timezone}\n    auth:\n      enabled: ${AUTH_ENABLED:false}\n\n  fiat:\n    enabled: false\n    host: ${services.default.host}\n    port: 7003\n    baseUrl: ${services.default.protocol}://${services.fiat.host}:${services.fiat.port}\n\n  front50:\n    host: ${services.default.host}\n    port: 8080\n    baseUrl: ${services.default.protocol}://${services.front50.host}:${services.front50.port}\n\n    # To use a cloud storage bucket on Amazon S3 or Google Cloud Storage instead\n    # of cassandra, set the storage_bucket, disable cassandra, and enable one of\n    # the service providers.\n    storage_bucket: ${SPINNAKER_DEFAULT_STORAGE_BUCKET:}\n    # (GCS Only) Location for bucket.\n    bucket_location:\n    bucket_root: front50\n\n    cassandra:\n      enabled: false\n    redis:\n      enabled: false\n    gcs:\n      enabled: false\n    s3:\n      enabled: false\n\n  gate:\n    host: ${services.default.host}\n    port: 8084\n    baseUrl: ${services.default.protocol}://${services.gate.host}:${services.gate.port}\n\n  igor:\n    # If you are integrating Jenkins then you must also enable Spinnaker's\n    # \"igor\" subsystem.\n    enabled: false\n    host: ${services.default.host}\n    port: 8088\n    baseUrl: ${services.default.protocol}://${services.igor.host}:${services.igor.port}\n\n  kato:\n    host: ${services.clouddriver.host}\n    port: ${services.clouddriver.port}\n    baseUrl: ${services.clouddriver.baseUrl}\n\n  mort:\n    host: ${services.clouddriver.host}\n    port: ${services.clouddriver.port}\n    baseUrl: ${services.clouddriver.baseUrl}\n\n  orca:\n    host: ${services.default.host}\n    port: 8083\n    baseUrl: ${services.default.protocol}://${services.orca.host}:${services.orca.port}\n    timezone: ${global.spinnaker.timezone}\n    enabled: true\n\n  oort:\n    host: ${services.clouddriver.host}\n    port: ${services.clouddriver.port}\n    baseUrl: ${services.clouddriver.baseUrl}\n\n  rosco:\n    host: ${services.default.host}\n    port: 8087\n    baseUrl: ${services.default.protocol}://${services.rosco.host}:${services.rosco.port}\n    # You need to provide the fully-qualified path to the directory containing\n    # the packer templates.\n    # They typically live in rosco's config/packer directory.\n    configDir: /opt/rosco/config/packer\n\n  bakery:\n    host: ${services.rosco.host}\n    port: ${services.rosco.port}\n    baseUrl: ${services.rosco.baseUrl}\n    extractBuildDetails: true\n    allowMissingPackageInstallation: false\n\n  docker:\n    # This target repository is used by the bakery to publish baked docker images.\n    # Do not include http://.\n    targetRepository: # Optional, but expected in spinnaker-local.yml if specified.\n\n  jenkins:\n    # If you are integrating Jenkins, set its location here using the baseUrl\n    # field and provide the username/password credentials.\n    # You must also enable the \"igor\" service listed separately.\n    # The \"name\" entry is used for the display name when selecting\n    # this server.\n    #\n    # If you have multiple jenkins servers, you will need to list\n    # them in an igor-local.yml. See jenkins.masters in config/igor.yml.\n    #\n    # Note that jenkins is not installed with Spinnaker so you must obtain this\n    # on your own if you are interested.\n    enabled: ${services.igor.enabled:false}\n    defaultMaster:\n      name: Jenkins\n      baseUrl:   # Expected in spinnaker-local.yml\n      username:  # Expected in spinnaker-local.yml\n      password:  # Expected in spinnaker-local.yml\n\n  redis:\n    host: ${services.default.host}\n    port: 6379\n    connection: redis://${services.redis.host}:${services.redis.port}\n\n  cassandra:\n    # cassandra.enabled is no longer used\n    # cassandra is enabled or disabled on a per-service basis\n    # where the alternative persistence mechanism for that service\n    # can be enabled.\n    host: ${services.default.host}\n    port: 9042\n    embedded: false\n    cluster: CASS_SPINNAKER\n\n  travis:\n    # If you are integrating Travis, set its location here using the baseUrl\n    # and adress fields and provide the githubToken for authentication.\n    # You must also enable the \"igor\" service listed separately.\n    #\n    # If you have multiple travis servers, you will need to list\n    # them in an igor-local.yml. See travis.masters in config/igor.yml.\n    #\n    # Note that travis is not installed with Spinnaker so you must obtain this\n    # on your own if you are interested.\n    enabled: false\n    defaultMaster:\n      name: ci # The display name for this server. Gets prefixed with \"travis-\"\n      baseUrl: https://travis-ci.com\n      address: https://api.travis-ci.org\n      githubToken: # GitHub scopes currently required by Travis is required.\n\n  spectator:\n    webEndpoint:\n      enabled: false\n\n  stackdriver:\n    enabled: ${SPINNAKER_STACKDRIVER_ENABLED:false}\n    projectName: ${SPINNAKER_STACKDRIVER_PROJECT_NAME:${providers.google.primaryCredentials.project}}\n    credentialsPath: ${SPINNAKER_STACKDRIVER_CREDENTIALS_PATH:${providers.google.primaryCredentials.jsonPath}}\n\n\nproviders:\n  aws:\n    # For more information on configuring Amazon Web Services (aws), see\n    # http://www.spinnaker.io/v1.0/docs/target-deployment-setup#section-amazon-web-services-setup\n\n    enabled: ${SPINNAKER_AWS_ENABLED:false}\n    simpleDBEnabled: false\n    defaultRegion: ${SPINNAKER_AWS_DEFAULT_REGION:us-west-2}\n    defaultIAMRole: BaseIAMRole\n    defaultSimpleDBDomain: CLOUD_APPLICATIONS\n    primaryCredentials:\n      name: default\n      # The actual credentials are set using a standard AWS client library mechanism\n      # http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html\n      # Typically this is a $HOME/.aws/credentials file (remember, a standard\n      # spinnaker installation runs as user \"spinnaker\" whose $HOME is\n      # /home/spinnaker). The primaryCredentials.name will identify which profile\n      # to use (for .aws/credentials).\n\n    #  will be interpolated with the aws account name (e.g. \"my-aws-account-keypair\").\n    defaultKeyPairTemplate: \"-keypair\"\n\n  google:\n    # For more information on configuring Google Cloud Platform (google), see\n    # http://www.spinnaker.io/v1.0/docs/target-deployment-setup#section-google-cloud-platform-setup\n\n    enabled: ${SPINNAKER_GOOGLE_ENABLED:false}\n    defaultRegion: ${SPINNAKER_GOOGLE_DEFAULT_REGION:us-central1}\n    defaultZone: ${SPINNAKER_GOOGLE_DEFAULT_ZONE:us-central1-f}\n\n    primaryCredentials:\n      name: my-account-name\n      # The project is the Google Project ID for the project to manage with\n      # Spinnaker. The jsonPath is a path to the JSON service credentials\n      # downloaded from the Google Developer's Console.\n      project: ${SPINNAKER_GOOGLE_PROJECT_ID:}\n      jsonPath: ${SPINNAKER_GOOGLE_PROJECT_CREDENTIALS_PATH:}\n      consul:\n        enabled: ${SPINNAKER_GOOGLE_CONSUL_ENABLED:false}\n\n  cf:\n    # For more information on configuring Cloud Foundry (cf) support, see\n    # http://www.spinnaker.io/v1.0/docs/target-deployment-setup#section-cloud-foundry-platform-setup\n\n    enabled: false\n    defaultOrg: spinnaker-cf-org\n    defaultSpace: spinnaker-cf-space\n    primaryCredentials:\n      name: my-cf-account\n      api: my-cf-api-uri\n      console: my-cf-console-base-url\n      # You must also supply cf.account.username and cf.account.password through env properties\n\n  azure:\n    # For more information on configuring Microsoft Azure (azure), see\n    # http://www.spinnaker.io/v1.0/docs/target-deployment-setup#section-azure-cloud-platform-setup\n\n    enabled: ${SPINNAKER_AZURE_ENABLED:false}\n    defaultRegion: ${SPINNAKER_AZURE_DEFAULT_REGION:westus}\n    primaryCredentials:\n      name: my-azure-account\n\n      # To set Azure credentials, enter your Azure supscription values for:\n      # clientId, appKey, tenantId, and subscriptionId.\n      clientId:\n      appKey:\n      tenantId:\n      subscriptionId:\n\n  titan:\n    # If you want to deploy some services to titan,\n    # set enabled and provide primary credentials for deploying.\n    # Enabling titan is independent of other providers.\n    enabled: false\n    defaultRegion: us-east-1\n    primaryCredentials:\n      name: my-titan-account\n\n  kubernetes:\n    # For more information on configuring Kubernetes clusters (kubernetes), see\n    # http://www.spinnaker.io/v1.0/docs/target-deployment-setup#section-kubernetes-cluster-setup\n\n    # NOTE: enabling kubernetes also requires enabling dockerRegistry.\n    enabled: ${SPINNAKER_KUBERNETES_ENABLED:false}\n    primaryCredentials:\n      name: my-kubernetes-account\n      namespace: default\n      dockerRegistryAccount: ${providers.dockerRegistry.primaryCredentials.name}\n\n  dockerRegistry:\n    # If you want to use a container based provider, you need to configure and\n    # enable this provider to cache images.\n    enabled: ${SPINNAKER_KUBERNETES_ENABLED:false}\n\n    primaryCredentials:\n      name: my-docker-registry-account\n      address: ${SPINNAKER_DOCKER_REGISTRY:https://index.docker.io/}\n      repository: ${SPINNAKER_DOCKER_REPOSITORY:}\n      username: ${SPINNAKER_DOCKER_USERNAME:}\n      # A path to a plain text file containing the user's password\n      passwordFile: ${SPINNAKER_DOCKER_PASSWORD_FILE:}\n\n  openstack:\n    # This default configuration uses the same environment variable names set in\n    # the OpenStack RC file. See\n    # http://docs.openstack.org/user-guide/common/cli-set-environment-variables-using-openstack-rc.html\n    # for details on the OpenStack RC file.\n    enabled: false\n    defaultRegion: ${SPINNAKER_OPENSTACK_DEFAULT_REGION:RegionOne}\n    primaryCredentials:\n      name: my-openstack-account\n      authUrl: ${OS_AUTH_URL}\n      username: ${OS_USERNAME}\n      password: ${OS_PASSWORD}\n      projectName: ${OS_PROJECT_NAME}\n      domainName: ${OS_USER_DOMAIN_NAME:Default}\n      regions: ${OS_REGION_NAME:RegionOne}\n      insecure: false\n"},"kind":"ConfigMap","metadata":{"name":"default-config","namespace":"armory"}}